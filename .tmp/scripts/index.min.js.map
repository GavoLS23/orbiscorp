{"version":3,"sources":["index.js","main.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","navigator","protocol","serviceWorker","register","then","registration","onupdatefound","installingWorker","controller","installing","onstatechange","state","Error","catch","e","console","error","let","doc","document","addEventListener","menuButton","getElementById","menu","classList","contains","remove","add","createApp","App","mount"],"mappings":"AAmBA,CAAA,WAOE,IAAIA,EAAcC,QAAqC,cAA7BC,OAAOC,SAASC,UAET,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wDACF,CACF,EAEE,kBAAmBC,YACW,WAA7BJ,OAAOC,SAASI,UAAyBP,IAC5CM,UAAUE,cAAcC,SAAS,mBAAmB,EACnDC,KAAK,SAASC,GAEbA,EAAaC,cAAgB,WAK3B,IAGMC,EAHFP,UAAUE,cAAcM,cAGtBD,EAAmBF,EAAaI,YAEnBC,cAAgB,WAC/B,OAAQH,EAAiBI,OACvB,IAAK,YAKH,MAEF,IAAK,YACH,MAAM,IAAIC,MAAM,iDACkC,CAItD,CACF,EAEJ,CACF,CAAC,EAAEC,MAAM,SAASC,GAChBC,QAAQC,MAAM,4CAA6CF,CAAC,CAC9D,CAAC,EAKHG,IAAIC,EAAMC,SAEVD,EAAIE,iBAAiB,mBAAoB,KACvC,IAAMC,EAAaH,EAAII,eAAe,aAAa,EACnD,IAAMC,EAAOL,EAAII,eAAe,MAAM,EAEtCD,EAAWD,iBAAiB,QAAS,KAC/BG,EAAKC,UAAUC,SAAS,QAAQ,GAClCF,EAAKC,UAAUE,OAAO,QAAQ,EAC9BH,EAAKC,UAAUG,IAAI,MAAM,IAEzBJ,EAAKC,UAAUE,OAAO,MAAM,EAC5BH,EAAKC,UAAUG,IAAI,QAAQ,EAE/B,CAAC,CACH,CAAC,CACF,EAAE,SC3FMC,SAAsB,KAAL,aACnBC,QAAS,gBAEhBD,UAAUC,GAAG,EAAEC,MAAM,MAAM","file":"index.min.js","sourcesContent":["/*!\n *\n *  Web Starter Kit\n *  Copyright 2015 Google Inc. All rights reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License\n *\n */\n/* eslint-env browser */\n(function() {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n    );\n\n  if ('serviceWorker' in navigator &&\n      (window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js')\n    .then(function(registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function() {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function() {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                                'service worker became redundant.');\n\n              default:\n                // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function(e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n\n  // Your custom JavaScript goes here\n\n  let doc = document\n\n  doc.addEventListener('DOMContentLoaded', ()=>{\n    const menuButton = doc.getElementById('menu_toggle');\n    const menu = doc.getElementById('menu')\n\n    menuButton.addEventListener('click', ()=>{\n      if (menu.classList.contains('hidden')){\n        menu.classList.remove('hidden')\n        menu.classList.add('flex')\n      }else{\n        menu.classList.remove('flex')\n        menu.classList.add('hidden')\n      }\n    })\n  })\n})();\n","// src/main.js\nimport { createApp } from 'vue';\nimport App from './src/App.vue';\n\ncreateApp(App).mount('#app');\n"]}